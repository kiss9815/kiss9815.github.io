---
title: "스프링 5.0 master 3장"
excerpt: "스프링 MVC 웹 애플리케이션 구축"
categories:
  - spring
tags:
  - spring-master책
last_modified_at: 2018-12-07T19:00:00+09:00
toc: true
toc_sticky: true
---

# 자바 웹 애플리케이션 아키텍처

## 모델 1 아키텍처

- JSP가 브라우저의 모든 것을 처리
- JSP는 자바 빈을 포함하는 모델을 사용
- 단점
      * 복잡한 JSP, 과도한 역할

## 모델 2 아키텍처

- 브라우저 요청은 서블릿으로 처리
- 뷰가 분리되어 있음
- 모델, 뷰 및 컨트롤러 간에 명확한 역할 분리를 제공

## 모델 2 프런트 컨트롤러

- 모델 2 아키텍처에서 브라우저 요청은 프런트 컨트롤러에서 처리
- 모든 요청이 프런트 컨트롤러라는 단일 컨트롤러로 전달
- 프런트 컨트롤러의 책임
      * 어떤 컨트롤러가 요청을 실행할지 결정
      * 렌더링할 뷰를 결정
      * 스프링 MVC는 프런트 컨트롤러에서 MVC 패턴을 사용
      * DispatcherServlet

# 기본 플로

- 뷰가 없는 컨트롤러, 자체적으로 콘텐츠 제공
- 뷰가 있는 컨트롤러(JSP)
- 뷰가 있고, ModelMap을 사용하는 컨트롤러
- 뷰가 있고, ModelAndView를 사용하는 컨트롤러
- 간단한 폼의 컨트롤러
- 밸리데이션이 있는 간단한 폼의 컨트롤러

# 스프링 MVC 개요

- 중요 기능
      * 각 객체에 대해 잘 정의된 독립적인 역할을 가짐
      * 유연한 컨트롤러 메서드 정의
      * 도메인 객체를 폼 백엔드 객체로 재사용
      * 현지화를 지원하는 태그 라이브러리가 내장
      * 키 - 쌍과 함께 해시 맵을 사용
      * 유연한 바인딩
      * 단위 테스트 컨트롤러에 MVC 프레임워크 포함

- 작동 방식
      * 브라우저는 특정 URL에 요청을 보냄, DispatcherServlet이 요청을 받음
      * 올바른 컨트롤러를 식별
      * 핸들러 매핑은 요청을 처리하는 핸들러 메서드를 반환
      * DispatcherServlet 핸들러 메서드 호출
      * 핸들러 메서드는 모델과 뷰를 반환
      * DispatcherServlet에는 논리적 뷰 이름이 있음, 물리적 뷰 이름을 결정하기 위한 뷰 리졸버를 찾은 뒤, 뷰 리졸버를 호출
      * 뷰 리졸버는 논리적 뷰 이름을 물리적 뷰 이름에 매핑하는 로직을 실행
      * DispatcherServlet은 뷰를 실행
      * 뷰는 DispatcherServlet으로 보내질 내용을 반환
      * DispatcherSerlvet은 응답을 다시 브라우저로 보냄

# 스프링 MVC 핵심 개념

- RequestMapping 메서드
      * URI를 컨트롤러 또는 컨트롤러 메서드에 매핑
      * 클래스 및 메서드 레벨에서 수행
      * 메서드 인수 사용
        + 뷰에 노출될 모델 역할
        + 요청 파라미터 빈에 바인딩
        + 명령 또는 폼 객체의 밸리데이션 결과
        + 빈에 의해 유지되는 자원 해제
        + HTTP 요청 파라미터에 액세스
        + HTTP 요청 헤더에 액세스
        + HTTP 세션으로부터 속성을 엑세스
        + HTTP 요청 속성에 액세스
        + ./owner/{ownerId}의 변수에 대한 엑세스를 허용
      * 다양한 리턴 타입 지원
        + 모델의 암묵적 풍부화
        + 뷰의 암묵적 결정  

- View Resolution
      * 뷰 옵션
        + JSP, 프리마커와의 통합
        + 다중 뷰 분석
        + 명시적으로 정의된 선호 순서로 뷰 리졸버의 체인
        + 콘텐츠 네고시에이션을 사용해 XML, JSON 및 Atom을 직접 생성

- 핸들러 매핑과 인터셉터
      * 2.5 버전에서는 URL과 컨트롤러간의 매핑이 핸들러 매핑이라는 것을 사용해 표현
      * 어노테이션을 사용하면 명시적인 핸들러 매핑이 필요하지 않음

- 모델 속성
      * 웹 폼의 드롭다운 값을 뷰에서 목록으로 표시될 수 있도록 모델에서 사용 가능
      * @ModelAttribute Annotation을 이용한 메서드를 사용

- 세션 속성
      * 단일 요청 이외에 유지되는 값들은 HTTP 세션에 저장
      * @SessionAttribute Annotation 제공

# 스프링 MVC - 고급 기능

- 예외 처리
      * 컨트롤러 어드바이스를 사용하여 컨트롤러 전반에서 일반적인 예외 처리를 구현
      * ExceptionController는 모델에 예외 세부 사항을 채운 후에 특정 뷰로 사용자를 리다이렉트 함
      * 컨트롤러 특정 예외 처리는 @ExceptionHander로 메서드 구현하여 쉽게 처리

- 국제화
      * SessionLocaleResolver는 사용자 세션에 저장되며 사용자 세션에만 유효
      * CookieLocaleResolver의 경우에 선택한 로케일은 쿠키에 저장

- 정적 자원 제공
      * 웹 애플리케이션 루트 폴더에서 정적 콘텐츠 노출
      * 캐싱
      * 정적 콘텐츠의 GZip 압축 가능

- 스프링 MVC와 부트스트랩의 통합
      * 부트 스트랩 - 반응형 웹, 모바일 우선 프로젝트 구현 오픈소스 툴킷
      * 부트스트랩 WebJars를 이용하여 의존성 전이를 해결

# 스프링 시큐리티

- 인증 : 사용자의 신원을 확인하고 사용자가 자신이라고 주장하는 사람인지를 확인하는 프로세스

- 권한 부여 : 사용자가 특정 작업을 수행할 수 있는 권한이 있는지를 확인하는 것

- 인증 메커니즘
      * 폼-기반 인증
      * LDAP
      * 자바 인증 및 권한 부여 서비스(JAAS)
      * 컨테이너 관리 인증
      * 커스텀 인증 시스템

- 스프링 시큐리티 사용하는 예제
      1. 스프링 시큐리티 의존성 추가
      2. 모든 요청에 인터셉터 설정
      3. 스프링 시큐리티 설정
      4. 로그 아웃 기능 추가
