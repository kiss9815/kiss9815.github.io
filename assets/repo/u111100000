package com.air.interpark.common;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Node;

import com.air.interpark.vo.LoginInfo;

public class LogUtil {
	private StringBuffer sB = new StringBuffer();
	private long startTime;
	private long finishTime;
	private JaxbMarshaller jaxbMarshaller = new JaxbMarshaller();

	public LoginInfo getLoginInfo(HttpServletRequest request) throws Exception {
		HttpSession session = request.getSession();
		return (LoginInfo) session.getAttribute("loginInfo");
	}

	public void startJob() {
		startTime = System.nanoTime();
	}

	public void finishJob() {
		finishTime = System.nanoTime();
	}

	private void setSbLength() {
		sB.setLength(0);
	}

	public String executeTimeLog(long startTime, long finishTime){
		setSbLength();
		sB.append("execute ").append((finishTime - startTime) / 1000000).append(" ms");
		return sB.toString();
	}

	public String executeTimeLog(){
		setSbLength();
		sB.append("execute ").append((this.finishTime - this.startTime) / 1000000).append(" ms");
		return sB.toString();
	}

	public long executeTime() {
		return (this.finishTime - this.startTime) / 1000000;
	}

	public String catchLog(Exception e){
		StringWriter sw = new StringWriter();
		e.printStackTrace(new PrintWriter(sw));
		return sw.getBuffer().toString();
	}

	/**
	 * @param obj
	 * @param mediaType	반환타입 xml or json
	 * @return
	 */
	public String toString(Object obj, String mediaType) throws Exception {
		return jaxbMarshaller.marshall(obj, mediaType);
	}

	/**
	 * @param contents		문자열 (XML string, JSON string)
	 * @param clazz			오브젝트의 클래스
	 * @param mediaType		문자열의 타입("xml", "json");
	 * @return	param clazz
	 * @throws Exception
	 */
	public Object toObject(String contents, Class<?> clazz, String mediaType) throws Exception {
		return jaxbMarshaller.unMarshall(contents, clazz, mediaType);
	}

	public String toString(Node doc) throws Exception {
		TransformerFactory tf = TransformerFactory.newInstance();
		Transformer transformer = tf.newTransformer();
		transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
		StringWriter writer = new StringWriter();
		transformer.transform(new DOMSource(doc), new StreamResult(writer));

		return writer.getBuffer().toString().replaceAll("\n|\r", "");
	}

	public String toString(HashMap<String, ?> hm) {
		if(hm == null) return null;

		setSbLength();
		List<String> keySet = new ArrayList<String>(hm.keySet());
		sB.append("\n##############################");
		for(String key : keySet) {
			sB.append("\n" + key + " : " + hm.get(key));
		}
		sB.append("\n##############################");
		return sB.toString();
	}

	public String toString(Object obj) {
		setSbLength();
		toString(sB, obj, 0);

		return sB.toString();
	}

	private void toString(StringBuffer sb, Object obj, int tabcnt) {
		String tab = "";
		for(int i = 0; i < tabcnt; i++) {
			tab += "\t";
		}

		try {
			if(obj != null) {
				sb.append("\n" + tab + "<" + obj.getClass().getName() + ">");

				Field[] fields = obj.getClass().getDeclaredFields();
				for(Field field : fields) {
					field.setAccessible(true);
					Type fieldType = field.getType();

					if(fieldType == java.util.List.class) { /** java.util.list 하위 객체 로깅 **/
						Object subObj = field.get(obj);

						if((ArrayList<?>)subObj != null) {
							for(Object subArray : (ArrayList<?>)subObj) {
								toString(sb, subArray, tabcnt + 1);
							}
						}

					} else if(fieldType.toString().indexOf("[L") > -1) { /** 원시형이 아닌 배열객체 로깅 **/
						Object[] subObj = (Object[]) field.get(obj);

						for(Object subArray : subObj) {
							if(subArray != null) {
								toString(sb, subArray, tabcnt + 1);
							}
						}

					} else if(!field.getType().isPrimitive() && field.getType() != String.class) { /** 원시형이 아닌 클래스 로깅 **/
						Object subObj = (Object) field.get(obj);
						toString(sb, subObj, tabcnt + 1);

					} else { /** 원시타입, String 객체 로깅 **/
						sb.append("\n\t" + tab + "<" + field.getName() + "><![CDATA[" + field.get(obj) + "]]></" + field.getName() + ">");
					}
				}

				sb.append("\n" + tab + "</" + obj.getClass().getName() + ">");
			}

		} catch (Exception e) {
			System.out.println(catchLog(e));
		}
	}
}
