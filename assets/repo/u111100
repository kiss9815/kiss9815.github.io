package com.air.interpark.common;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.Reader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Map;

import lombok.extern.slf4j.Slf4j;



import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;


@Slf4j
public class HttpConnectionUtil extends LogUtil {


	public String urlCall(String requesturl) {

		URL url = null;
		String requestMsg = "";
		String line = "";

		BufferedReader input = null;

		try {
			// Request
			url = new URL(requesturl);

			// Response
			URLConnection con = url.openConnection();
			con.setConnectTimeout(10 * 1000);
//			input = new BufferedReader(new InputStreamReader(url.openStream(),"EUC-KR"));
			input = new BufferedReader(new InputStreamReader(con.getInputStream(),"UTF-8"));

			while ((line = input.readLine()) != null) {
				requestMsg += line;
			}

		} catch (Exception e) {
			log.error(catchLog(e));
		}

		return requestMsg;
	}



	public String getHttp(String serverUrl){
		InputStream is      = null;
		BufferedReader in   = null;
		try {
			URL url = new URL(serverUrl);
		    HttpURLConnection con = (HttpURLConnection) url.openConnection();

		    // 서버로부터 메세지를 받을 수 있도록 한다. 기본값은 true이다.
		    con.setDoInput(true);

		    // 헤더값을 설정한다.
		    con.setRequestProperty("Content-Type", "text/xml; charset=utf-8");

		    // 전달 방식을 설정한다. POST or GET, 기본값은 GET 이다.
//		    con.setRequestMethod("POST");

		    // 서버로 데이터를 전송할 수 있도록 한다. GET방식이면 사용될 일이 없으나, true로 설정하면 자동으로 POST로 설정된다. 기본값은 false이다.
//		    con.setDoOutput(true);

		    String data         = "";

		    is  = con.getInputStream();
		    in  = new BufferedReader(new InputStreamReader(is, "UTF-8"));

		    String line = null;
		    StringBuffer buff   = new StringBuffer();

		    while ( ( line = in.readLine() ) != null )
		    {
		        buff.append(line);
		    }
		    data    = buff.toString().trim();

//		    log.info("data===>>"+data);
			return data;
		} catch(Exception e){
			log.info("Connection Error " + e.getMessage());
		}
		 finally {
				try{in.close();} catch(Exception ignore) {}
				try{is.close();} catch(Exception ignore) {}

		 }
		return null;
	}

	public String elasticHttpConn(String requestJSONString, String serverUrl, String soapAction) throws Exception {

		StringBuffer sb = new StringBuffer();
		HttpClient   httpClient    = HttpClientBuilder.create().build();


        try {

            HttpPost postRequest = new HttpPost(serverUrl);
            postRequest.setHeader("Content-type", "application/json");
            String entry = requestJSONString;


			StringEntity input = new StringEntity(entry,StandardCharsets.UTF_8); // HTTP.UTF8 은 사용 안함.
//            log.info("input==>>"+input);
            input.setContentType("application/json");

            postRequest.setEntity(input);

            HttpResponse response = httpClient.execute(postRequest);
//            log.info("response===>>>"+response);
            /*
            if (response.getStatusLine().getStatusCode() != 200) {
                throw new RuntimeException("Failed : HTTP error code : " + response.getStatusLine().getStatusCode());
            }*/

            BufferedReader br = new BufferedReader(new InputStreamReader((response.getEntity().getContent())));
            String output;

            while ((output = br.readLine()) != null) {
            	sb.append(output);
            }

//            log.info(sb.toString());


        } catch (MalformedURLException e) {
            e.printStackTrace();
            return "error";
        } catch (IOException e) {
            e.printStackTrace();
            return "error";
        }
        finally{
        	 httpClient.getConnectionManager().shutdown();
        }
        return sb.toString();

    }


	public String getHttpPost(String serverUrl,String param){
		InputStream is      = null;
		BufferedReader in   = null;
		String data = "";
		try {

			// 요청할 파라미터의 정보를 입력한다.
			String body = param;

			URL url = new URL(serverUrl);
		    HttpURLConnection con = (HttpURLConnection) url.openConnection();

		    //타임아웃 셋팅 - 연결관련
		    con.setConnectTimeout(3000);

		    //타임아웃 셋팅 - 연결 후
		    con.setReadTimeout(1500);

			// POST방식으로 요청한다.( 기본값은 GET )
		    con.setRequestMethod("POST");

			// nputStream으로 응답 헤더와 메시지를 읽어들이겠다는 옵션을 정의한다.
			con.setDoInput(true);

			// OutputStream으로 POST 데이터를 넘겨주겠다는 옵션을 정의한다.
			con.setDoOutput(true);

			// 요청 헤더를 정의한다.( 원래 Content-Length값을 넘겨주어야하는데 넘겨주지 않아도 되는것이 이상하다. )
//			con.setRequestProperty("Content-Type", "application/x-www-form-urlencoded;charset=EUC-KR");
			con.setRequestProperty("Content-Type", "application/x-www-form-urlencoded; charset=utf-8");

			// 새로운 OutputStream에 요청할 OutputStream을 넣는다.
			   OutputStream os = con.getOutputStream();

			// 그리고 write메소드로 메시지로 작성된 파라미터정보를 바이트단위로 "EUC-KR"로 인코딩해서 요청한다.
			// 여기서 중요한 점은 "UTF-8"로 해도 되는데 한글일 경우는 "EUC-KR"로 인코딩해야만 한글이 제대로 전달된다.
			   os.write( body.getBytes("euc-kr") );

			// 그리고 스트림의 버퍼를 비워준다.
			   os.flush();

			// 스트림을 닫는다.
			os.close();

			// 응답받은 메시지의 길이만큼 버퍼를 생성하여 읽어들이고, "EUC-KR"로 디코딩해서 읽어들인다.
//			BufferedReader br = new BufferedReader( new InputStreamReader( con.getInputStream(), "UTF-8" ), con.getContentLength() );

			is  = con.getInputStream();
		    in  = new BufferedReader(new InputStreamReader(is, "UTF-8"), con.getContentLength());


			String buf;
			StringBuffer buff   = new StringBuffer();



			// 표준출력으로 한 라인씩 출력
			while( ( buf = in.readLine() ) != null ) {
//				log.info( buf );
				buff.append(buf);
			}

//			log.info("data===>>"+buff.toString());

			data = buff.toString().trim();



		} catch(Exception e){
			log.info("Connection Error " + e.getMessage());
		}
		 finally {
				try{in.close();} catch(Exception ignore) {}
				try{is.close();} catch(Exception ignore) {}

		 }
		return data;
	}


	public String sendPostReuest(Map<String, Object> params, URL url) throws Exception {

		StringBuilder postData = new StringBuilder();
		for (Map.Entry<String, Object> param : params.entrySet()) {
			if (postData.length() != 0)
				postData.append('&');
			postData.append(URLEncoder.encode(param.getKey(), "UTF-8"));
			postData.append('=');
			postData.append(URLEncoder.encode(String.valueOf(param.getValue()), "UTF-8"));
		}
		byte[] postDataBytes = postData.toString().getBytes("UTF-8");

		HttpURLConnection conn = null;
		try {
			conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod("POST");
			conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
			conn.setRequestProperty("Content-Length", String.valueOf(postDataBytes.length));
			conn.setDoOutput(true);
			conn.getOutputStream().write(postDataBytes);

		} catch (IOException e) {
			e.toString();
		}
		Reader in;
		try {
			in = new BufferedReader(new InputStreamReader(conn.getInputStream(), "UTF-8"));
			StringBuilder sb = new StringBuilder();
			for (int c; (c = in.read()) >= 0;) {
				sb.append((char) c);
			}
			String response = sb.toString();
			return response;
		} catch (IOException e) {
			log.error(e.toString());
		}
		return "";
	}




}
